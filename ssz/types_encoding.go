// Code generated by fastssz. DO NOT EDIT.
// Hash: 7801d93bbd737deaa7776807d0e9d1a404e312faaf97989e4a46e729698692df
// Version: 0.1.3
package ssz

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ValidatorRegistration object
func (v *ValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorRegistration object to a target array
func (v *ValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'FeeRecipient'
	if size := len(v.FeeRecipient); size != 20 {
		err = ssz.ErrBytesLengthFn("ValidatorRegistration.FeeRecipient", size, 20)
		return
	}
	dst = append(dst, v.FeeRecipient...)

	// Field (1) 'GasLimit'
	dst = ssz.MarshalUint64(dst, v.GasLimit)

	// Field (2) 'Timestamp'
	dst = ssz.MarshalUint64(dst, v.Timestamp)

	// Field (3) 'Pubkey'
	if size := len(v.Pubkey); size != 48 {
		err = ssz.ErrBytesLengthFn("ValidatorRegistration.Pubkey", size, 48)
		return
	}
	dst = append(dst, v.Pubkey...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorRegistration object
func (v *ValidatorRegistration) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 84 {
		return ssz.ErrSize
	}

	// Field (0) 'FeeRecipient'
	if cap(v.FeeRecipient) == 0 {
		v.FeeRecipient = make([]byte, 0, len(buf[0:20]))
	}
	v.FeeRecipient = append(v.FeeRecipient, buf[0:20]...)

	// Field (1) 'GasLimit'
	v.GasLimit = ssz.UnmarshallUint64(buf[20:28])

	// Field (2) 'Timestamp'
	v.Timestamp = ssz.UnmarshallUint64(buf[28:36])

	// Field (3) 'Pubkey'
	if cap(v.Pubkey) == 0 {
		v.Pubkey = make([]byte, 0, len(buf[36:84]))
	}
	v.Pubkey = append(v.Pubkey, buf[36:84]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorRegistration object
func (v *ValidatorRegistration) SizeSSZ() (size int) {
	size = 84
	return
}

// HashTreeRoot ssz hashes the ValidatorRegistration object
func (v *ValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorRegistration object with a hasher
func (v *ValidatorRegistration) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'FeeRecipient'
	if size := len(v.FeeRecipient); size != 20 {
		err = ssz.ErrBytesLengthFn("ValidatorRegistration.FeeRecipient", size, 20)
		return
	}
	hh.PutBytes(v.FeeRecipient)

	// Field (1) 'GasLimit'
	hh.PutUint64(v.GasLimit)

	// Field (2) 'Timestamp'
	hh.PutUint64(v.Timestamp)

	// Field (3) 'Pubkey'
	if size := len(v.Pubkey); size != 48 {
		err = ssz.ErrBytesLengthFn("ValidatorRegistration.Pubkey", size, 48)
		return
	}
	hh.PutBytes(v.Pubkey)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ValidatorRegistration object
func (v *ValidatorRegistration) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the SignedValidatorRegistration object
func (s *SignedValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedValidatorRegistration object to a target array
func (s *SignedValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("SignedValidatorRegistration.Signature", size, 96)
		return
	}
	dst = append(dst, s.Signature...)

	return
}

// UnmarshalSSZ ssz unmarshals the SignedValidatorRegistration object
func (s *SignedValidatorRegistration) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 180 {
		return ssz.ErrSize
	}

	// Field (0) 'Message'
	if err = s.Message.UnmarshalSSZ(buf[0:84]); err != nil {
		return err
	}

	// Field (1) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[84:180]))
	}
	s.Signature = append(s.Signature, buf[84:180]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedValidatorRegistration object
func (s *SignedValidatorRegistration) SizeSSZ() (size int) {
	size = 180
	return
}

// HashTreeRoot ssz hashes the SignedValidatorRegistration object
func (s *SignedValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedValidatorRegistration object with a hasher
func (s *SignedValidatorRegistration) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("SignedValidatorRegistration.Signature", size, 96)
		return
	}
	hh.PutBytes(s.Signature)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedValidatorRegistration object
func (s *SignedValidatorRegistration) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
